class Node
{
    int data;
    Node left;
    Node right;
    Node(int val)
    {
        this.data=val;
        this.left=null;
        this.right=null;
    }
    }
class Tree
{
    public Node root = null;
    public void insert(int val)
    {
        Node don = new Node(val);
        if(root==null)
        {
            root=don;
            return;
        }
        else{
            Node temp =root;
            while(true)
            {
            if(temp.data>don.data)
            {
             if(temp.left==null)
             {
             temp.left=don;
             break;
             }
             else
            {
            temp=temp.left;
            }
            }
            else{
                if(temp.right==null)
                {
                    temp.right=don;
                    break;
                }
                else{
                    temp=temp.right;
                }
            }
            }
            }
        }
        public void pre(Node root)
        {
             
            if(root!=null)
            {
                System.out.print(root.data+" ");
                pre(root.left);
                pre(root.right);
            }
        }
        public void In(Node root)
        {
            
            if(root!=null)
            {
               
                pre(root.left);
                System.out.print(root.data+" ");
                pre(root.right);
            }
        }
        public void post(Node root)
        {
            
            if(root!=null)
            {
               
                pre(root.left);
                pre(root.right);
                System.out.print(root.data+" ");
            }
        }
    }


public class Main {
    public static void main(String[] args) {
        Tree t = new Tree();
        t.insert(100);
        t.insert(70);
        t.insert(110);
        t.insert(11);
        t.insert(85);
        t.insert(105);
        t.insert(123);
        t.insert(7);
        t.insert(93);
        t.insert(18);
        t.insert(114);
        t.insert(115);
        t.insert(116);
        System.out.print("\nElement in Preorder traversal is: \n");
        t.pre(t.root);
        System.out.print("\nElement in Inorder traversal is: \n");
        t.In(t.root);
        System.out.print("\nElement in Postorder traversal is: \n");
        t.post(t.root);
        
    }
}


OUTPUT:

Element in Preorder traversal is: 
100 70 11 7 18 85 93 110 105 123 114 115 116 
Element in Inorder traversal is: 
70 11 7 18 85 93 100 110 105 123 114 115 116 
Element in Postorder traversal is: 
70 11 7 18 85 93 110 105 123 114 115 116 100 
